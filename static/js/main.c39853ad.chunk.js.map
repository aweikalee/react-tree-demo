{"version":3,"sources":["utils/useFirstRun.ts","utils/usePropState.ts","utils/useStateRef.ts","components/Tree/utils.tsx","components/Tree/TreeNode.tsx","components/Tree/index.tsx","components/Tree/useTreeContext.ts","components/Checkbox/Checkbox.tsx","components/Tree/useValidateChecked.tsx","components/Tree/Tree.tsx","components/Checkbox/index.tsx","mock/db.tsx","mock/api.tsx","Stage0.tsx","Stage1.tsx","App.tsx","index.tsx"],"names":["useFirstRun","effect","deps","isFirst","useRef","effectCallback","useCallback","useEffect","current","usePropsState","defaultValue","prop","useState","state","setState","useStateRef","ref","flatChildren","children","res","idSet","Set","React","Children","map","child","helper","level","isTreeNode","props","nodeId","oldLevel","has","console","error","add","treeNodes","otherNodes","push","newLevel","undefined","cloneElement","forEach","v","popEmpty","stack","i","length","pop","createNearestChildrenMap","Map","cur","id","splice","parentId","arr","get","set","filterChildren","parentsCondition","selfCondition","filter","index","condition1","includes","condition2","indexOfChild","getChildren","getParents","_level","inferChecked","checked","hasState0","hasState2","setCheckedMap","key","value","setExpandedMap","Component","name","other","useContext","TreeContext","getCheckedState","isDisabled","isExpanded","toggleExpanded","toggleChecked","isExpandable","disabled","expandable","expanded","indent","className","Array","fill","expandButton","data-expanded","onClick","viewBox","focusable","data-icon","width","height","aria-hidden","d","checkbox","isValidElement","type","displayName","createContext","useTreeContext","onChecked","onExpanded","onNodeChecked","onNodeExpanded","setCheckedState","setExpandedState","toNearestChildren","checkedRef","disabledRef","expandedRef","onCheckedRef","onExpandedRef","onNodeCheckedRef","onNodeExpandedRef","childrenRef","toNearestChildrenRef","newExpanded","newChecked","newCheckState","theChildren","theParents","nearestChildren","oldState","toArray","some","next","useMemo","data-checked","data-disabled","useValidateChecked","active","queue","parent","pid","checkedProp","disabledProp","expandedProp","validateChecked","flat","context","visiabledChildren","Provider","count","n","options","db","loadData","newQueue","shift","createPromise","data","Promise","resolve","setTimeout","api","more","limit","Stage0","setData","setChecked","setDisabled","setExpanded","loaded","setLoaded","loadedRef","init","newDisabled","newLoaded","node","then","insert","a","render","Tree","nodeChildren","findNode","log","printChecked","JSON","parse","stringify","findNodeHelper","tree","Stage1","lastIndexOf","slice","App","buttons","stage","setStage","title","setTitle","showStage","ReactDOM","StrictMode","document","getElementById"],"mappings":"yOAEO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAUC,kBAAO,GACjBC,EAAiBC,sBAAYL,EAAQC,GAE3CK,qBAAU,WACR,GAAKJ,EAAQK,QAEb,OADAL,EAAQK,SAAU,EACXH,MACN,CAACF,EAASE,IAGAL,I,OCdR,SAASS,EACdC,EACAC,GAC+C,IAAD,EACpBC,oBAAY,kBAAMD,GAAQD,KADN,mBACvCG,EADuC,KAChCC,EADgC,KAO9C,OAJAP,qBAAU,WACJI,GAAMG,EAASH,KAClB,CAACA,EAAMG,IAEH,CAACD,EAAOC,GCVV,SAASC,EAAeF,GAC7B,IAAMG,EAAMZ,iBAAUS,GAMtB,OAJAN,qBAAU,WACRS,EAAIR,QAAUK,IACb,CAACA,EAAOG,IAEJA,I,8BCTT,+WAeO,SAASC,EAAaC,GAC3B,IAAMC,EAAyB,GACzBC,EAAQ,IAAIC,IAkClB,OADAC,IAAMC,SAASC,IAAIN,GAAU,SAACO,GAAD,OAhCd,SAATC,EAAUD,EAAwBE,GACtC,GAAKC,YAAWH,GAAhB,CADwD,MAEVA,EAAMI,MAA5CC,EAFgD,EAEhDA,OAAeC,EAFiC,EAExCJ,MAAiBT,EAFuB,EAEvBA,SAG7BE,EAAMY,IAAIF,IACZG,QAAQC,MAAR,2DACuDJ,EADvD,OAIFV,EAAMe,IAAIL,GAEV,IAAMM,EAA+B,GAC/BC,EAAgC,GACtCf,IAAMC,SAASC,IAAIN,GAAU,SAACO,GACxBG,YAAWH,GACbW,EAAUE,KAAKb,GAEfY,EAAWC,KAAKb,MAIpB,IAAMc,OACSC,IAAbT,GAA0BA,EAAWJ,EAAQA,EAAQI,EACvDZ,EAAImB,KACFhB,IAAMmB,aAAahB,EAAO,CACxBP,SAAUmB,EACVV,MAAOY,KAGXH,EAAUM,SAAQ,SAACC,GAAD,OAAOjB,EAAOiB,EAAGJ,EAAW,OAERb,CAAOD,EAAO,MAC/CN,EAGF,SAASyB,EAASC,GACvB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,GAAK,QACjBN,IAAbK,EAAMC,GAD2BA,GAAK,EAExCD,EAAMG,MAWL,SAASC,EAAyB/B,GAIvC,IAHA,IAAMC,EAAM,IAAI+B,IACVL,EAAkB,GAEfC,EAAI,EAAGA,EAAI5B,EAAS6B,OAAQD,GAAK,EAAG,CAC3C,IAAMK,EAAMjC,EAAS4B,GACfM,EAAKD,EAAItB,MAAMC,OACfH,EAAQwB,EAAItB,MAAMF,MACpBkB,EAAME,OAASpB,IACjBkB,EAAMQ,OAAO1B,GACbiB,EAASC,IAEX,IAAMS,EAAWT,EAAMA,EAAME,OAAS,GAEtC,QAAiBP,IAAbc,EAAwB,CAC1B,IAAMC,EAAMpC,EAAIqC,IAAIF,IAAa,GACjCC,EAAIjB,KAAKa,GACThC,EAAIsC,IAAIH,EAAUC,GAEpBV,EAAMlB,GAASyB,EAGjB,OAAOjC,EASF,SAASuC,EACdxC,EACAyC,GAEC,IADDC,EACA,uDADoE,kBAAM,GAEpEf,EAAmB,GACzB,OAAO3B,EAAS2C,QAAO,SAACpC,EAAOqC,GAC7B,IAAMnC,EAAQF,EAAMI,MAAMF,MACtBkB,EAAME,OAASpB,GAAOkB,EAAMQ,OAAO1B,GACvC,IAAMoC,GAAclB,EAAMmB,UAAS,GAC7BC,EAAaL,EAAcnC,EAAOqC,GAExC,OADAjB,EAAMlB,GAASgC,EAAiBlC,EAAOqC,GAChCC,GAAcE,KASlB,SAASC,EAAad,EAAYlC,GAEvC,IADA,IAAI4C,GAAiB,EACZhB,EAAI,EAAGA,EAAI5B,EAAS6B,OAAQD,GAAK,EACxC,GAAI5B,EAAS4B,GAAGjB,MAAMC,SAAWsB,EAAI,CACnCU,EAAQhB,EACR,MAGJ,OAAOgB,EAQF,SAASK,EAAYf,EAAYlC,GACtC,IAAM4C,EAAQI,EAAad,EAAIlC,GACzBC,EAAyB,GAC/B,IAAe,IAAX2C,EAAc,OAAO3C,EAGzB,IADA,IAAMQ,EAAQT,EAAS4C,GAAOjC,MAAMF,MAC3BmB,EAAIgB,EAAQ,EAAGhB,EAAI5B,EAAS6B,OAAQD,GAAK,EAAG,CACnD,IAAMK,EAAMjC,EAAS4B,GACrB,GAAIK,EAAItB,MAAMF,OAAUA,EAAO,MAC/BR,EAAImB,KAAKa,GAGX,OAAOhC,EASF,SAASiD,EAAWhB,EAAYlC,GACrC,IAAM4C,EAAQI,EAAad,EAAIlC,GACzBC,EAAyB,GAC/B,IAAe,IAAX2C,EAAc,OAAO3C,EAGzB,IADA,IAAIQ,EAAQT,EAAS4C,GAAOjC,MAAMF,MACzBmB,EAAIgB,EAAQ,EAAGhB,GAAK,EAAGA,GAAK,EAAG,CACtC,IAAMK,EAAMjC,EAAS4B,GACfuB,EAASlB,EAAItB,MAAMF,MAKzB,GAJI0C,EAAS1C,IACXR,EAAImB,KAAKa,GACTxB,EAAQ0C,GAEK,IAAXA,EAAc,MAGpB,OAAOlD,EASF,SAASmD,EAAaC,EAAkBrD,GAC7C,IAAIL,EACJ,GAAIK,EAAS6B,OAAQ,CAGnB,IAFA,IAAIyB,GAAY,EACZC,GAAY,EACP3B,EAAI,EAAGA,EAAI5B,EAAS6B,OAAQD,GAAK,EAAG,CAE3C,OAAQyB,EADIrD,EAAS4B,GACDjB,MAAMC,SACxB,KAAK,EACH0C,GAAY,EACZ,MACF,KAAK,EACHA,EAAYC,GAAY,EACxB,MACF,KAAK,EACHA,GAAY,EACZ,MACF,QACED,GAAY,EAEhB,GAAIA,GAAaC,EAAW,MAE1BD,GAAaC,EACf5D,EAAQ,EACC2D,IAAcC,EACvB5D,EAAQ,GACE2D,GAAaC,IACvB5D,EAAQ,GAIZ,OAAOA,EAGF,SAAS6D,EACdlD,EACAmD,EACAC,GAEc,IAAVA,SACKpD,EAAImD,GAEXnD,EAAImD,GAAOC,EAIR,SAASC,EACdrD,EACAmD,EACAC,IAEc,IAAVA,EACFpD,EAAImD,GAAOC,SAEJpD,EAAImD,K,2GCvOTG,EAAqC,SAACjD,GAAW,IAC7CC,EAAgDD,EAAhDC,OAAQiD,EAAwClD,EAAxCkD,KADoC,EACIlD,EAAlCF,aAD8B,MACtB,EADsB,EACnBT,EAAuBW,EAAvBX,SAAa8D,EADM,YACInD,EADJ,wCAUhDoD,qBAAWC,KANbC,EAJkD,EAIlDA,gBACAC,EALkD,EAKlDA,WACAC,EANkD,EAMlDA,WACAC,EAPkD,EAOlDA,eACAC,EARkD,EAQlDA,cACAC,EATkD,EASlDA,aAGIjB,EAAUY,EAAkBA,EAAgBrD,GAAU,EACtD2D,IAAWL,GAAaA,EAAWtD,GACnC4D,IAAaF,GAAeA,EAAa1D,GACzC6D,KAAWN,IAAcK,IAAaL,EAAWvD,GAGjD8D,EACJ,yBAAKC,UAAU,oBACZ,IAAIC,MAAMnE,GAAOoE,MAAK,GAAMvE,KAAI,SAACmB,EAAGmB,GAAJ,OAC/B,0BAAM+B,UAAU,yBAAyBlB,IAAKb,QAM9CkC,EAAeN,EACnB,yBACEG,UAAU,mBACVI,gBAAeN,EACfO,QAAS,kBAAMZ,GAAkBA,EAAexD,KAEhD,yBACE+D,UAAU,yBACVM,QAAQ,gBACRC,UAAU,QACVC,YAAU,aACVC,MAAM,MACNC,OAAO,MACPR,KAAK,eACLS,cAAY,QAEZ,0BAAMC,EAAE,yHAIZ,yBAAKZ,UAAU,gCAIXa,EACJ,yBAAKb,UAAU,sBACb,kBAAC,WAAD,CACEtB,QAASA,EACTkB,SAAUA,EACVS,QAAS,kBAAMX,GAAiBA,EAAczD,OAKpD,OACE,uCAAK+D,UAAU,aAAgBb,GAC5BY,EACAI,EACAU,EAED,yBAAKb,UAAU,qBACb,yBAAKA,UAAU,kBAAkBd,GAChCY,GAAYzE,KASd,SAASU,EACdH,GAEA,OAAOH,IAAMqF,eAAelF,IAAUA,EAAMmF,OAAS9B,EANvDA,EAAU+B,YAAc,WACT/B,O,8BCjFf,gH,0ICuCaI,EAAc5D,IAAMwF,cAA4B,IAEtD,SAASC,EAAelF,GAA2B,IAEtD0C,EAYE1C,EAZF0C,QACAkB,EAWE5D,EAXF4D,SACAE,EAUE9D,EAVF8D,SACAqB,EASEnF,EATFmF,UACAC,EAQEpF,EARFoF,WACAC,EAOErF,EAPFqF,cACAC,EAMEtF,EANFsF,eAEAC,EAIEvF,EAJFuF,gBACAC,EAGExF,EAHFwF,iBACAnG,EAEEW,EAFFX,SACAoG,EACEzF,EADFyF,kBAGIC,EAAaxG,YAAYwD,GACzBiD,EAAczG,YAAY0E,GAC1BgC,EAAc1G,YAAY4E,GAE1B+B,EAAe3G,YAAYiG,GAC3BW,EAAgB5G,YAAYkG,GAC5BW,EAAmB7G,YAAYmG,GAC/BW,EAAoB9G,YAAYoG,GAEhCW,EAAc/G,YAAYG,GAC1B6G,EAAuBhH,YAAYuG,GAEnCnC,EAAmD7E,uBACvD,SAAC8C,GAAD,OAAQmB,EAAQnB,IAAO,IACvB,CAACmB,IAGGc,EAAyC/E,uBAC7C,SAAC8C,GAAD,OAAyB,IAAjBuC,EAASvC,KACjB,CAACuC,IAGGP,EAAyC9E,uBAC7C,SAAC8C,GAAD,OAAyB,IAAjBqC,EAASrC,KACjB,CAACqC,IAGGH,EAAiDhF,uBACrD,SAAC8C,GACC,IAAMuC,EAAW8B,EAAYjH,QACvByG,EAAaU,EAAcnH,QAC3B2G,EAAiBU,EAAkBrH,QAEnCwH,EAAW,eAAQrC,GACzBd,YAAemD,EAAa5E,GAAwB,IAApB4E,EAAY5E,IAC9B,OAAd+D,QAAc,IAAdA,KAAiB/D,EAAI4E,EAAY5E,IACjCiE,EAAiBW,GACP,OAAVf,QAAU,IAAVA,KAAae,EAAarC,KAE5B,CAAC8B,EAAaI,EAAmBF,EAAeN,IAG5C9B,EAA+CjF,uBACnD,SAAC8C,GACC,IAAMlC,EAAW4G,EAAYtH,QACvB8G,EAAoBS,EAAqBvH,QACzC+D,EAAUgD,EAAW/G,QACrBiF,EAAW+B,EAAYhH,QACvBwG,EAAYU,EAAalH,QACzB0G,EAAgBU,EAAiBpH,QACjC4E,EAAa,SAAChC,GAAD,OAAiC,IAAjBqC,EAASrC,IAE5C,IAAIgC,EAAWhC,KAEA,IADDc,YAAad,EAAIlC,GAC/B,CAEA,IAAM+G,EAAU,eAAQ1D,GAGlB2D,EAA8C,IAAhB3D,EAAQnB,GAAY,EAAI,EAC5DsB,YAAcuD,EAAY7E,EAAI8E,GACjB,OAAbhB,QAAa,IAAbA,KAAgB9D,EAAI,GAGpB,IAAM+E,EAAchE,YAAYf,EAAIlC,GACpCwC,YACEyE,GACA,SAAC1G,GAAD,OAAY2D,EAAW3D,EAAMI,MAAMC,WACnC,SAACL,GAAD,OAAY2D,EAAW3D,EAAMI,MAAMC,WACnCY,SAAQ,SAACjB,GACT,IAAM2B,EAAK3B,EAAMI,MAAMC,OACnBsD,EAAWhC,KACfsB,YAAcuD,EAAY7E,EAAI8E,GACjB,OAAbhB,QAAa,IAAbA,KAAgB9D,EAAI,OAKtB,IADA,IAAMgF,EAAahE,YAAWhB,EAAIlC,GACzB4B,EAAI,EAAGA,EAAIsF,EAAWrF,OAAQD,GAAK,EAAG,CAAC,IAAD,EAEvCM,EADSgF,EAAWtF,GACRjB,MAAMC,OACxB,GAAIsD,EAAWhC,GAAK,MAEpB,IAAMiF,EAAe,UAAGf,EACrB9D,IAAIJ,UADc,aAAG,EAEpBS,QAAO,SAACpC,GAAD,OAAY2D,EAAW3D,EAAMI,MAAMC,WACxCwG,EAAWL,EAAW7E,IAAO,EAC7BvC,EAAQyD,YAAa2D,EAAYI,GAAmB,IAC1D,QAAc7F,IAAV3B,GAAuByH,IAAazH,EAAO,MAE/C6D,YAAcuD,EAAY7E,EAAIvC,GACjB,OAAbqG,QAAa,IAAbA,KAAgB9D,EAAIvC,GAGtBuG,EAAgBa,GACP,OAATjB,QAAS,IAATA,KAAYiB,EAAY1D,MAE1B,CACEuD,EACAC,EACAR,EACAC,EACAE,EACAE,EACAR,IAIE5B,EAAelF,uBACnB,SAAC8C,GACC,IAAMU,EAAgBI,YAAad,EAAIlC,GACvC,IAAe,IAAX4C,EAAc,OAAO,EACzB,IAAMX,EAAMjC,EAAS4C,GAErB,GADkBxC,IAAMC,SAASgH,QAAQpF,EAAItB,MAAMX,UACrCsH,MAAK,SAAC7F,GAAD,OAAOA,KAAI,OAAO,EACrC,IAAM8F,EAAOvH,EAAS4C,EAAQ,GAC9B,QAAK2E,GACEtF,EAAItB,MAAMF,MAAS8G,EAAK5G,MAAMF,QAEvC,CAACT,IAsBH,OAnB8BwH,mBAC5B,iBAAO,CACLvD,kBACAC,aACAC,aACAC,iBACAC,gBACAC,kBAEF,CACEL,EACAC,EACAC,EACAC,EACAC,EACAC,M,yDC7LAV,G,MAAqC,SAACjD,GACoBA,EAAtDX,SAD6C,IAAD,EACUW,EAA5C0C,eADkC,MACxB,EADwB,IACU1C,EAA/B4D,gBADqB,SACAT,EADA,YACUnD,EADV,mCAGpD,OACE,wCACEgE,UAAU,WACV8C,eAAcpE,EACdqE,gBAAenD,GACXT,MAKVF,EAAU+B,YAAc,WACT/B,O,oFCSR,SAAS+D,EACdC,EACAjH,GACC,IAEC0C,EAME1C,EANF0C,QACAkB,EAKE5D,EALF4D,SACAuB,EAIEnF,EAJFmF,UACAI,EAGEvF,EAHFuF,gBACAlG,EAEEW,EAFFX,SACAoG,EACEzF,EADFyF,kBAGIC,EAAaxG,YAAYwD,GACzBiD,EAAczG,YAAY0E,GAC1BiC,EAAe3G,YAAYiG,GAEjCzG,qBAAU,WACR,GAAKuI,EAAL,CAYA,IAXA,IAAMb,EAAU,eAAQV,EAAW/G,SAC7BiF,EAAW+B,EAAYhH,QACvBwG,EAAYU,EAAalH,QAGzBuI,EAAQrF,YACZxC,GACA,SAACO,GAAD,OAAYgE,EAAShE,EAAMI,MAAMC,WACjC,SAACL,GAAD,OAAYgE,EAAShE,EAAMI,MAAMC,WAE7Be,EAA2B,GACxBC,EAAI,EAAGA,EAAIiG,EAAMhG,OAAQD,GAAK,EAAG,CACxC,IAAMK,EAAM4F,EAAMjG,GACZM,EAAKD,EAAItB,MAAMC,OACfH,EAAQwB,EAAItB,MAAMF,MACpBkB,EAAME,OAASpB,IACjBkB,EAAMQ,OAAO1B,GACbiB,YAASC,IAEX,IAAMmG,EAASnG,EAAMA,EAAME,OAAS,GAEpC,QAAeP,IAAXwG,EAAsB,CACxB,IAAMC,EAAMD,EAAOnH,MAAMC,OACD,IAApBmG,EAAWgB,IAAYvE,YAAcuD,EAAY7E,EAAI,GAE3DP,EAAMlB,GAASwB,EAIjBmE,EAAkB5E,SAAQ,SAAC2F,EAAiBY,GAC1C,IAAM/H,EAAWmH,EAAgBxE,QAAO,SAAClB,GAAD,OAAQ8C,EAAS9C,EAAEd,MAAMC,WACjE,GAAMZ,GAAYA,EAAS6B,OAA3B,CACA,IAAMlC,EAAQyD,YAAa2D,EAAY/G,QACzBsB,IAAV3B,GAAqB6D,YAAcuD,EAAYgB,EAAKpI,OAG1DuG,EAAgBa,GACP,OAATjB,QAAS,IAATA,KAAYiB,EAAYV,EAAW/G,YAClC,CACDsI,EACA5H,EACAoG,EACAC,EACAC,EACAE,EACAN,I,MAIWyB,ICnFT/D,EAAiC,SAACjD,GAAW,IAEtCqH,EASPrH,EATF0C,QACU4E,EAQRtH,EARF4D,SACU2D,EAORvH,EAPF8D,SACAqB,EAMEnF,EANFmF,UACAC,EAKEpF,EALFoF,WACAC,EAIErF,EAJFqF,cACAC,EAGEtF,EAHFsF,eAR8C,EAW5CtF,EAFFwH,uBAT8C,SAU9CnI,EACEW,EADFX,SAV8C,EAabT,YAAuB,GAAIyI,GAbd,mBAazC3E,EAbyC,KAahC6C,EAbgC,OAc7B3G,YAAwB,GAAI0I,GAAxC1D,EAdyC,sBAeXhF,YAAwB,GAAI2I,GAfjB,mBAezCzD,EAfyC,KAe/B0B,EAf+B,KAiB1CpG,EAAeyH,mBAAQ,kBAAMY,YAAKpI,KAAW,CAACA,IAC9CoG,EAAoBoB,mBACxB,kBAAMzF,YAAyBhC,KAC/B,CAACA,IAIH4H,EAAmBQ,EAAiB,CAClC9E,UACAkB,WACAuB,YACAI,kBACAlG,SAAUD,EACVqG,sBAGF,IAAMiC,EAAUxC,YAAe,CAC7BxC,UACAkB,WACAE,WACAqB,YACAC,aACAC,gBACAC,iBAEAC,kBACAC,mBAEAnG,SAAUD,EACVqG,sBAIIkC,EAAoBd,mBAAQ,WAChC,OAAOhF,YAAezC,GAAc,SAACQ,GACnC,OAAOkE,EAASlE,EAAMI,MAAMC,UAAW,OAExC,CAAC6D,EAAU1E,IAEd,OACE,kBAAC,IAAYwI,SAAb,CAAsB7E,MAAO2E,GAC3B,6BAAMC,KAKZ1E,EAAU+B,YAAc,OACT/B,O,iEC7Ef,8D,iOCaI4E,EAAQ,EACL,SAASC,IAAgC,IAA9BC,EAA6B,uDAAJ,GACnCxG,EAAKsG,IACLvI,EAAS,2BACVyI,GADU,IAEbxG,GAAG,GAAD,OAAKwG,EAAQxG,GAAKwG,EAAQxG,GAAKA,GACjC6F,IAAKW,EAAQX,IAAMW,EAAQX,IAAM,KACjClE,KAAK,GAAD,OAAK6E,EAAQ7E,MAAQ,eAArB,YAA6B3B,KAEnC,OAAOjC,EAGF,IAAM0I,EAAK,CAChBF,EAAE,CAAE5E,KAAM,eAAM+E,UAAU,IAC1BH,EAAE,CAAE5E,KAAM,eAAMU,UAAU,IAC1BkE,EAAE,CAAE5E,KAAM,8CAAYR,SAAS,IAC/BoF,EAAE,CAAE5E,KAAM,gDACV4E,EAAE,CAAE5E,KAAM,kBAERkE,EAAMY,EAAG,GAAGzG,GAChByG,EAAGvH,KAAKqH,EAAE,CAAEV,MAAKxD,UAAU,IAASkE,EAAE,CAAEV,SAExCA,EAAMY,EAAG,GAAGzG,GACZyG,EAAGvH,KAAKqH,EAAE,CAAEV,QAAQU,EAAE,CAAEV,SAExBA,EAAMY,EAAG,GAAGzG,GACZyG,EAAGvH,KAAKqH,EAAE,CAAEV,MAAK1E,SAAS,IAASoF,EAAE,CAAEV,SACtC,WAEC,IADA,IAAIF,EAAgB,CAACc,EAAG,IACf/G,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAG,CAE7B,IADA,IAAMiH,EAAmB,GAClBhB,EAAMhG,QAAQ,CACnB,IACMkG,EADMF,EAAMiB,QACF5G,GACVlC,EAAW,CAACyI,EAAE,CAAEV,QAAQU,EAAE,CAAEV,MAAKxD,UAAU,KACjDsE,EAASzH,KAAT,MAAAyH,EAAiB7I,GACjB2I,EAAGvH,KAAH,MAAAuH,EAAW3I,GAEb6H,EAAQgB,GAXX,GCrCM,SAASE,EAAiBC,GAC/B,OAAO,IAAIC,SAAW,SAACC,GACrBC,YAAW,WACTD,EAAQF,KACP,QAIP,IASeI,EATH,CACVJ,KADU,WAER,OAAOD,EAAcJ,IAEvBU,KAJU,SAILtB,GAAkC,IAArBuB,EAAoB,uDAAJ,GAChC,OAAOP,EAAc,IAAInE,MAAM0E,GAAOzE,MAAK,GAAMvE,KAAI,kBAAMmI,EAAE,CAAEV,c,OC6FpDwB,MAxFf,WAAmB,IAAD,EACQ7J,mBAAkB,IAD1B,mBACTsJ,EADS,KACHQ,EADG,OAGc9J,mBAAkB,IAHhC,mBAGT2D,EAHS,KAGAoG,EAHA,OAIgB/J,mBAAmB,IAJnC,mBAIT6E,EAJS,KAICmF,EAJD,OAKgBhK,mBAAmB,IALnC,mBAKT+E,EALS,KAKCkF,EALD,OAMYjK,mBAI1B,IAVc,mBAMTkK,EANS,KAMDC,EANC,KAYVC,EAAYjK,YAAY+J,GAExBG,EAAO3K,uBACX,SAACa,GACC,IAAM8G,EAAsB,GACtBiD,EAAwB,GACxBlD,EAAwB,GACxBmD,EAAqB,GAC3BhK,EAAIuB,SAAQ,SAAC0I,GAAU,IACbhI,EAA8CgI,EAA9ChI,GAAImB,EAA0C6G,EAA1C7G,QAASkB,EAAiC2F,EAAjC3F,SAAUE,EAAuByF,EAAvBzF,SAAUmE,EAAasB,EAAbtB,SACrCvF,IAAS0D,EAAW7E,GAAM,GAC1BqC,IAAUyF,EAAY9H,IAAM,GAC5BuC,IAAUqC,EAAY5E,IAAM,GAC5B0G,IAAUqB,EAAU/H,GAAM,MAEhCuH,GAAW,SAAC9J,GAAD,mBAAC,eAAgBA,GAAUoH,MACtC2C,GAAY,SAAC/J,GAAD,mBAAC,eAAgBA,GAAUqK,MACvCL,GAAY,SAAChK,GAAD,mBAAC,eAAgBA,GAAUmH,MACvC+C,GAAU,SAAClK,GAAD,mBAAC,eAAgBA,GAAUsK,QAEvC,CAACR,EAAYC,EAAaC,EAAaE,IAIzC/K,aAAY,WACVsK,EAAIJ,OAAOmB,MAAK,SAAClK,GACf8J,EAAK9J,GACLuJ,GAAQ,SAAC7J,GAAD,OAAWyK,EAAOzK,EAAOM,WAElC,CAAC8J,EAAMP,IAGV,IAAMvD,EAA8C7G,sBAAW,uCAC7D,WAAO8C,EAAIwB,GAAX,iBAAA2G,EAAA,yDACO3G,EADP,2DAGiBpC,KADTsI,EAASE,EAAUxK,QAAQ4C,KACL0H,EAAS,GAHvC,wDAKEC,GAAU,SAAClK,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBuC,EAAK,OAL1C,SAMoBkH,EAAIC,KAAKnH,EAAI,IANjC,OAMQjC,EANR,OAOE4J,GAAU,SAAClK,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBuC,EAAK,OACxC6H,EAAK9J,GACLuJ,GAAQ,SAAC7J,GAAD,OAAWyK,EAAOzK,EAAOM,MATnC,4CAD6D,wDAY7D,CAACuJ,EAASM,EAAWD,EAAWE,IAG5B/J,EAAWwH,mBAAQ,WAQvB,OAAOwB,EAAK1I,KAAI,SAACmB,GAAD,OAPD,SAAT6I,EAAUJ,GAAD,OACb,kBAACK,EAAA,SAAD,CAAU9G,IAAKyG,EAAKhI,GAAItB,OAAQsJ,EAAKhI,GAAI2B,KAAMqG,EAAKrG,MACjDqG,EAAKlK,SACLkK,EAAKM,aAAalK,KAAI,SAACmB,GAAD,OAAO6I,EAAO7I,MACpCyI,EAAKtB,UAAgC,IAApBgB,EAAOM,EAAKhI,KAAa,uDAGxBoI,CAAO7I,QAC7B,CAACuH,EAAMY,IAEV,OACE,8BACI5J,EAAS6B,QAAU,sDACrB,kBAAC0I,EAAA,KAAD,CACElH,QAASA,EACTkB,SAAUA,EACVE,SAAUA,EACVqB,UAAW2D,EACX1D,WAAY4D,EACZ1D,eAAgBA,GAEfjG,GAEH,4BAAQgF,QAAS,kBA+CvB,SAAsB3B,EAAkB2F,GACtC,IAAM/I,EAAe,GACrB,IAAK,IAAMiC,KAAMmB,EAEf,GAAoB,IAAhBA,EAAQnB,GAAZ,CACA,IAAMgI,EAAOO,EAASvI,EAAI8G,GACtBkB,GAAMjK,EAAImB,KAAK8I,GAErBnJ,QAAQ2J,IAAIzK,GAvDe0K,CAAatH,EAAS2F,KAA7C,8BAWN,SAASoB,EAAO/H,EAAc2G,GAC5B,IAAM/I,EAAe2K,KAAKC,MAAMD,KAAKE,UAAUzI,IAc/C,OAbA2G,EAAKxH,SAAQ,SAACC,GACZ,IAAMlB,EAAY,2BAAQkB,GAAR,IAAW+I,aAAc,KAC3C,GAAIjK,EAAMwH,IAAK,CACb,IAAMD,EAAS2C,EAASlK,EAAMwH,IAAK9H,GAC/B6H,EACFA,EAAO0C,aAAapJ,KAAKb,GAEzBN,EAAImB,KAAKb,QAGXN,EAAImB,KAAKb,MAGNN,EAGT,SAASwK,EAASvI,EAAY8G,GAC5B,IAAK,IAAIpH,EAAI,EAAGA,EAAIoH,EAAKnH,OAAQD,GAAK,EAAG,CACvC,IAAM3B,EAAM8K,EAAe7I,EAAI8G,EAAKpH,IACpC,GAAI3B,EAAK,OAAOA,GAIpB,SAAS8K,EAAe7I,EAAY8I,GAClC,GAAIA,EAAK9I,KAAOA,EAAI,OAAO8I,EAC3B,IAAMhL,EAAWgL,EAAKR,aACtB,GAAIxK,EACF,IAAK,IAAI4B,EAAI,EAAGA,EAAI5B,EAAS6B,OAAQD,GAAK,EAAG,CAC3C,IAAM3B,EAAM8K,EAAe7I,EAAIlC,EAAS4B,IACxC,GAAI3B,EAAK,OAAOA,GCrCPgL,MAxFf,WAAmB,IAAD,EACQvL,mBAAkB,IAD1B,mBACTsJ,EADS,KACHQ,EADG,OAGc9J,mBAAkB,IAHhC,mBAGT2D,EAHS,KAGAoG,EAHA,OAIgB/J,mBAAmB,IAJnC,mBAIT6E,EAJS,KAICmF,EAJD,OAKgBhK,mBAAmB,IALnC,mBAKT+E,EALS,KAKCkF,EALD,OAMYjK,mBAAkB,IAN9B,mBAMTkK,EANS,KAMDC,EANC,KAQVC,EAAYjK,YAAY+J,GAExBG,EAAO3K,uBACX,SAACa,GACC,IAAM8G,EAAsB,GACtBiD,EAAwB,GACxBlD,EAAwB,GACxBmD,EAAqB,GAC3BhK,EAAIuB,SAAQ,SAAC0I,GAAU,IACbhI,EAA8CgI,EAA9ChI,GAAImB,EAA0C6G,EAA1C7G,QAASkB,EAAiC2F,EAAjC3F,SAAUE,EAAuByF,EAAvBzF,SAAUmE,EAAasB,EAAbtB,SACrCvF,IAAS0D,EAAW7E,GAAM,GAC1BqC,IAAUyF,EAAY9H,IAAM,GAC5BuC,IAAUqC,EAAY5E,IAAM,GAC5B0G,IAAUqB,EAAU/H,GAAM,MAEhCuH,GAAW,SAAC9J,GAAD,mBAAC,eAAgBA,GAAUoH,MACtC2C,GAAY,SAAC/J,GAAD,mBAAC,eAAgBA,GAAUqK,MACvCL,GAAY,SAAChK,GAAD,mBAAC,eAAgBA,GAAUmH,MACvC+C,GAAU,SAAClK,GAAD,mBAAC,eAAgBA,GAAUsK,QAEvC,CAACR,EAAYC,EAAaC,EAAaE,IAIzC/K,aAAY,WACVsK,EAAIJ,OAAOmB,MAAK,SAAClK,GACf8J,EAAK9J,GACLuJ,GAAQ,SAAC7J,GAAD,OAAWyK,EAAOzK,EAAOM,WAElC,CAAC8J,EAAMP,IAGV,IAAMvD,EAA8C7G,sBAAW,uCAC7D,WAAO8C,EAAIwB,GAAX,iBAAA2G,EAAA,yDACO3G,EADP,2DAGiBpC,KADTsI,EAASE,EAAUxK,QAAQ4C,KACL0H,EAAS,GAHvC,wDAKEC,GAAU,SAAClK,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBuC,EAAK,OAL1C,SAMoBkH,EAAIC,KAAKnH,EAAI,IANjC,OAMQjC,EANR,OAOE4J,GAAU,SAAClK,GAAD,mBAAC,eAAgBA,GAAjB,kBAAyBuC,EAAK,OAExC6H,EAAK9J,GACLuJ,GAAQ,SAAC7J,GAAD,OAAWyK,EAAOzK,EAAOM,MAVnC,4CAD6D,wDAa7D,CAACuJ,EAASM,EAAWD,EAAWE,IAG5B/J,EAAWwH,mBAAQ,WACvB,OAAOwB,EAAK1I,KAAI,SAAC4J,GAAD,OACd,kBAACK,EAAA,SAAD,CACE9G,IAAKyG,EAAKhI,GACVtB,OAAQsJ,EAAKhI,GACb2B,KAAMqG,EAAKrG,KACXpD,MAAOyJ,EAAKzJ,OAEXyJ,EAAKlK,SACLkK,EAAKtB,UAAgC,IAApBgB,EAAOM,EAAKhI,KAAa,4DAG9C,CAAC8G,EAAMY,IAEV,OACE,8BACI5J,EAAS6B,QAAU,sDACrB,kBAAC0I,EAAA,KAAD,CACElH,QAASA,EACTkB,SAAUA,EACVE,SAAUA,EACVqB,UAAW2D,EACX1D,WAAY4D,EACZ1D,eAAgBA,GAEfjG,GAEH,4BAAQgF,QAAS,kBA4CvB,SAAsB3B,EAAkB2F,GACtC,IAAM/I,EAAc,GACpB,IAAK,IAAMiC,KAAMmB,EAEf,GAAoB,IAAhBA,EAAQnB,GAAZ,CACA,IAAMU,EAAQsI,EAAYlC,EAAM9G,IACjB,IAAXU,GAAc3C,EAAImB,KAAK4H,EAAKpG,IAElC7B,QAAQ2J,IAAIzK,GApDe0K,CAAatH,EAAS2F,KAA7C,8BAWN,SAASoB,EAAO/H,EAAc2G,GAC5B,IAAM/I,EAAeoC,EAAI8I,QAkBzB,OAjBAnC,EAAKxH,SAAQ,SAACC,GACZ,IAAMlB,EAAY,2BAAQkB,GAAR,IAAWhB,MAAO,IACpC,GAAIF,EAAMwH,IAAK,CACb,IAAInF,EAAQsI,EAAYjL,EAAKM,EAAMwH,KAC7BtH,GAAmB,IAAXmC,EAAe,EAAI3C,EAAI2C,GAAOnC,MAG5C,IAFAmC,GAAmB,IAAXA,EAAe3C,EAAI4B,OAASe,EAAQ,EAErCA,EAAQ3C,EAAI4B,WACZ5B,EAAI2C,GAAOnC,OAAS,IAAMA,GADNmC,GAAS,GAIpCrC,EAAME,MAAQA,EAAQ,EACtBR,EAAIkC,OAAOS,EAAO,EAAGrC,QAErBN,EAAImB,KAAKb,MAGNN,EAGT,SAASiL,EAAY7I,EAAcH,GAEjC,IADA,IAAIU,GAAS,EACJhB,EAAIS,EAAIR,OAAS,EAAGD,GAAK,EAAGA,GAAK,EACxC,GAAIM,IAAOG,EAAIT,GAAGM,GAAI,CACpBU,EAAQhB,EACR,MAGJ,OAAOgB,EC7GMwI,MAhCf,WACE,IAAMC,EAAU,CAAC,+DAAc,gEADlB,EAEa3L,mBAAS,GAFtB,mBAEN4L,EAFM,KAECC,EAFD,OAGa7L,mBAAS2L,EAAQ,IAH9B,mBAGNG,EAHM,KAGCC,EAHD,KAIPC,EAAYlE,mBAAQ,WACxB,OAAQ8D,GACN,KAAK,EACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,kBAAC,EAAD,SAEV,CAACA,IAEJ,OACE,6BACGD,EAAQ/K,KAAI,SAACkL,EAAO5I,GAAR,OACX,4BACEa,IAAK+H,EACLxG,QAAS,WACPuG,EAAS3I,GACT6I,EAASD,KAGVA,MAGL,6BAAMA,GACLE,IC1BPC,IAASrB,OACP,kBAAC,IAAMsB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.c39853ad.chunk.js","sourcesContent":["import { useEffect, useRef, useCallback } from 'react'\r\n\r\nexport function useFirstRun(\r\n  effect: React.EffectCallback,\r\n  deps: React.DependencyList\r\n) {\r\n  const isFirst = useRef(true)\r\n  const effectCallback = useCallback(effect, deps)\r\n\r\n  useEffect(() => {\r\n    if (!isFirst.current) return\r\n    isFirst.current = false\r\n    return effectCallback()\r\n  }, [isFirst, effectCallback])\r\n}\r\n\r\nexport default useFirstRun\r\n","import { useState, useEffect } from 'react'\r\n\r\nexport function usePropsState<S>(\r\n  defaultValue: S,\r\n  prop?: S\r\n): [S, React.Dispatch<React.SetStateAction<S>>] {\r\n  const [state, setState] = useState<S>(() => prop || defaultValue)\r\n\r\n  useEffect(() => {\r\n    if (prop) setState(prop)\r\n  }, [prop, setState])\r\n\r\n  return [state, setState]\r\n}\r\n\r\nexport default usePropsState\r\n","import { useEffect, useRef } from 'react'\r\n\r\nexport function useStateRef<S>(state: S) {\r\n  const ref = useRef<S>(state)\r\n\r\n  useEffect(() => {\r\n    ref.current = state\r\n  }, [state, ref])\r\n\r\n  return ref\r\n}\r\n\r\nexport default useStateRef\r\n","import React from 'react'\r\nimport {\r\n  NodeId,\r\n  TreeNodeElement,\r\n  Checked,\r\n  CheckedState,\r\n  Expanded,\r\n  ExpandedState,\r\n} from './types'\r\nimport { isTreeNode } from './TreeNode'\r\n\r\n/**\r\n * 将树状图展开成一维数组\r\n * @param children\r\n */\r\nexport function flatChildren(children: React.ReactNode) {\r\n  const res: TreeNodeElement[] = []\r\n  const idSet = new Set<NodeId>()\r\n  const helper = (child: React.ReactNode, level: number) => {\r\n    if (!isTreeNode(child)) return\r\n    const { nodeId, level: oldLevel, children } = child.props\r\n\r\n    /* nodeId 查重 */\r\n    if (idSet.has(nodeId)) {\r\n      console.error(\r\n        `Encountered two tree node with the same nodeId, \\`${nodeId}\\`.`\r\n      )\r\n    }\r\n    idSet.add(nodeId)\r\n\r\n    const treeNodes: React.ReactNode[] = []\r\n    const otherNodes: React.ReactNode[] = []\r\n    React.Children.map(children, (child) => {\r\n      if (isTreeNode(child)) {\r\n        treeNodes.push(child)\r\n      } else {\r\n        otherNodes.push(child)\r\n      }\r\n    })\r\n\r\n    const newLevel =\r\n      oldLevel === undefined || oldLevel < level ? level : oldLevel\r\n    res.push(\r\n      React.cloneElement(child, {\r\n        children: otherNodes,\r\n        level: newLevel,\r\n      })\r\n    )\r\n    treeNodes.forEach((v) => helper(v, newLevel + 1))\r\n  }\r\n  React.Children.map(children, (child) => helper(child, 0))\r\n  return res\r\n}\r\n\r\nexport function popEmpty(stack: any[]) {\r\n  for (let i = stack.length - 1; i >= 0; i -= 1) {\r\n    if (stack[i] === undefined) {\r\n      stack.pop()\r\n    } else {\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 创建 最近子项索引\r\n * @param children\r\n */\r\nexport function createNearestChildrenMap(children: TreeNodeElement[]) {\r\n  const res = new Map<NodeId, TreeNodeElement[]>()\r\n  const stack: NodeId[] = []\r\n\r\n  for (let i = 0; i < children.length; i += 1) {\r\n    const cur = children[i]\r\n    const id = cur.props.nodeId\r\n    const level = cur.props.level!\r\n    if (stack.length > level) {\r\n      stack.splice(level)\r\n      popEmpty(stack)\r\n    }\r\n    const parentId = stack[stack.length - 1]\r\n\r\n    if (parentId !== undefined) {\r\n      const arr = res.get(parentId) || []\r\n      arr.push(cur)\r\n      res.set(parentId, arr)\r\n    }\r\n    stack[level] = id\r\n  }\r\n\r\n  return res\r\n}\r\n\r\n/**\r\n * 过滤\r\n * @param children\r\n * @param parentsCondition 父节点需要满足的条件\r\n * @param selfCondition 节点本身需要满足的条件\r\n */\r\nexport function filterChildren(\r\n  children: TreeNodeElement[],\r\n  parentsCondition: (child: TreeNodeElement, index: number) => boolean,\r\n  selfCondition: (child: TreeNodeElement, index: number) => boolean = () => true\r\n) {\r\n  const stack: boolean[] = []\r\n  return children.filter((child, index) => {\r\n    const level = child.props.level!\r\n    if (stack.length > level) stack.splice(level)\r\n    const condition1 = !stack.includes(false)\r\n    const condition2 = selfCondition(child, index)\r\n    stack[level] = parentsCondition(child, index)\r\n    return condition1 && condition2\r\n  })\r\n}\r\n\r\n/**\r\n * 获得节点在数组中的下标\r\n * @param id\r\n * @param children\r\n */\r\nexport function indexOfChild(id: NodeId, children: TreeNodeElement[]) {\r\n  let index: number = -1\r\n  for (let i = 0; i < children.length; i += 1) {\r\n    if (children[i].props.nodeId === id) {\r\n      index = i\r\n      break\r\n    }\r\n  }\r\n  return index\r\n}\r\n\r\n/**\r\n * 获得所有子节点\r\n * @param id\r\n * @param children\r\n */\r\nexport function getChildren(id: NodeId, children: TreeNodeElement[]) {\r\n  const index = indexOfChild(id, children)\r\n  const res: TreeNodeElement[] = []\r\n  if (index === -1) return res\r\n\r\n  const level = children[index].props.level!\r\n  for (let i = index + 1; i < children.length; i += 1) {\r\n    const cur = children[i]\r\n    if (cur.props.level! <= level) break\r\n    res.push(cur)\r\n  }\r\n\r\n  return res\r\n}\r\n\r\n/**\r\n * 获得所有父节点\r\n * 离得越近的父节点，越早push进数组\r\n * @param id\r\n * @param children\r\n */\r\nexport function getParents(id: NodeId, children: TreeNodeElement[]) {\r\n  const index = indexOfChild(id, children)\r\n  const res: TreeNodeElement[] = []\r\n  if (index === -1) return res\r\n\r\n  let level = children[index].props.level!\r\n  for (let i = index - 1; i >= 0; i -= 1) {\r\n    const cur = children[i]\r\n    const _level = cur.props.level!\r\n    if (_level < level) {\r\n      res.push(cur)\r\n      level = _level\r\n    }\r\n    if (_level === 0) break\r\n  }\r\n\r\n  return res\r\n}\r\n\r\n/**\r\n * 根据子节点 推断父节点的 checked\r\n * 返回 undefined 时则表示没有子节点 无法推断\r\n * @param checked\r\n * @param children\r\n */\r\nexport function inferChecked(checked: Checked, children: TreeNodeElement[]) {\r\n  let state: CheckedState | void\r\n  if (children.length) {\r\n    let hasState0 = false\r\n    let hasState2 = false\r\n    for (let i = 0; i < children.length; i += 1) {\r\n      const cur = children[i]\r\n      switch (checked[cur.props.nodeId]) {\r\n        case 0:\r\n          hasState0 = true\r\n          break\r\n        case 1:\r\n          hasState0 = hasState2 = true\r\n          break\r\n        case 2:\r\n          hasState2 = true\r\n          break\r\n        default:\r\n          hasState0 = true\r\n      }\r\n      if (hasState0 && hasState2) break\r\n    }\r\n    if (hasState0 && hasState2) {\r\n      state = 1\r\n    } else if (hasState0 && !hasState2) {\r\n      state = 0\r\n    } else if (!hasState0 && hasState2) {\r\n      state = 2\r\n    }\r\n  }\r\n\r\n  return state\r\n}\r\n\r\nexport function setCheckedMap(\r\n  map: Checked,\r\n  key: keyof Checked,\r\n  value: CheckedState\r\n) {\r\n  if (value === 0) {\r\n    delete map[key]\r\n  } else {\r\n    map[key] = value\r\n  }\r\n}\r\n\r\nexport function setExpandedMap(\r\n  map: Expanded,\r\n  key: keyof Expanded,\r\n  value: ExpandedState\r\n) {\r\n  if (value === true) {\r\n    map[key] = value\r\n  } else {\r\n    delete map[key]\r\n  }\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Checkbox } from '../Checkbox'\r\nimport { TreeContext } from './useTreeContext'\r\nimport { TreeNodeProps } from './types'\r\n\r\nconst Component: React.FC<TreeNodeProps> = (props) => {\r\n  const { nodeId, name, level = 0, children, ...other } = props\r\n\r\n  const {\r\n    getCheckedState,\r\n    isDisabled,\r\n    isExpanded,\r\n    toggleExpanded,\r\n    toggleChecked,\r\n    isExpandable,\r\n  } = useContext(TreeContext)\r\n\r\n  const checked = getCheckedState ? getCheckedState(nodeId) : 0\r\n  const disabled = isDisabled ? isDisabled(nodeId) : false\r\n  const expandable = isExpandable ? isExpandable(nodeId) : false\r\n  const expanded = isExpanded && expandable ? isExpanded(nodeId) : false\r\n\r\n  /* 缩进 */\r\n  const indent = (\r\n    <div className=\"tree-node-indent\">\r\n      {new Array(level).fill(true).map((v, index) => (\r\n        <span className=\"tree-node-indent__unit\" key={index}></span>\r\n      ))}\r\n    </div>\r\n  )\r\n\r\n  /* 展开按钮 */\r\n  const expandButton = expandable ? (\r\n    <div\r\n      className=\"tree-node-expand\"\r\n      data-expanded={expanded}\r\n      onClick={() => toggleExpanded && toggleExpanded(nodeId)}\r\n    >\r\n      <svg\r\n        className=\"tree-node-expand__icon\"\r\n        viewBox=\"0 0 1024 1024\"\r\n        focusable=\"false\"\r\n        data-icon=\"caret-down\"\r\n        width=\"1em\"\r\n        height=\"1em\"\r\n        fill=\"currentColor\"\r\n        aria-hidden=\"true\"\r\n      >\r\n        <path d=\"M840.4 300H183.6c-19.7 0-30.7 20.8-18.5 35l328.4 380.8c9.4 10.9 27.5 10.9 37 0L858.9 335c12.2-14.2 1.2-35-18.5-35z\"></path>\r\n      </svg>\r\n    </div>\r\n  ) : (\r\n    <div className=\"tree-node-expand-placeholer\"></div>\r\n  )\r\n\r\n  /* 复选框 */\r\n  const checkbox = false ? null : (\r\n    <div className=\"tree-node-checkbox\">\r\n      <Checkbox\r\n        checked={checked}\r\n        disabled={disabled}\r\n        onClick={() => toggleChecked && toggleChecked(nodeId)}\r\n      />\r\n    </div>\r\n  )\r\n\r\n  return (\r\n    <div className=\"tree-node\" {...other}>\r\n      {indent}\r\n      {expandButton}\r\n      {checkbox}\r\n\r\n      <div className=\"tree-node-content\">\r\n        <div className=\"tree-node-name\">{name}</div>\r\n        {expanded && children}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nComponent.displayName = 'TreeNode'\r\nexport default Component\r\n\r\nexport function isTreeNode(\r\n  child: React.ReactNode\r\n): child is React.ReactElement<React.PropsWithChildren<TreeNodeProps>> {\r\n  return React.isValidElement(child) && child.type === Component\r\n}\r\n","export { default } from './Tree'\r\nexport { default as Tree } from './Tree'\r\nexport { default as TreeNode, isTreeNode } from './TreeNode'\r\nexport * from './types'\r\n","import React, { useCallback, useMemo } from 'react'\r\nimport {\r\n  TreeProps,\r\n  TreeContext as ITreeContext,\r\n  Checked,\r\n  Expanded,\r\n  CheckedState,\r\n  NodeId,\r\n  TreeNodeElement,\r\n} from './types'\r\nimport {\r\n  filterChildren,\r\n  indexOfChild,\r\n  getChildren,\r\n  getParents,\r\n  inferChecked,\r\n  createNearestChildrenMap,\r\n  setExpandedMap,\r\n  setCheckedMap,\r\n} from './utils'\r\nimport { useStateRef } from '../../utils'\r\n\r\ntype IState = 'checked' | 'disabled' | 'expanded'\r\ntype IRequire<T extends TreeProps> = {\r\n  [K in IState]: NonNullable<T[K]>\r\n}\r\ntype ISetState = {\r\n  setCheckedState: React.Dispatch<React.SetStateAction<Checked>>\r\n  setExpandedState: React.Dispatch<React.SetStateAction<Expanded>>\r\n}\r\ntype IProps<T extends TreeProps> = Omit<T, IState> &\r\n  IRequire<T> &\r\n  ISetState & {\r\n    children: TreeNodeElement[]\r\n    toNearestChildren: ReturnType<typeof createNearestChildrenMap>\r\n  }\r\n\r\nexport type ITreeContextProps = IProps<TreeProps>\r\n\r\nexport const TreeContext = React.createContext<ITreeContext>({})\r\n\r\nexport function useTreeContext(props: ITreeContextProps) {\r\n  const {\r\n    checked,\r\n    disabled,\r\n    expanded,\r\n    onChecked,\r\n    onExpanded,\r\n    onNodeChecked,\r\n    onNodeExpanded,\r\n\r\n    setCheckedState,\r\n    setExpandedState,\r\n    children,\r\n    toNearestChildren,\r\n  } = props\r\n\r\n  const checkedRef = useStateRef(checked)\r\n  const disabledRef = useStateRef(disabled)\r\n  const expandedRef = useStateRef(expanded)\r\n\r\n  const onCheckedRef = useStateRef(onChecked)\r\n  const onExpandedRef = useStateRef(onExpanded)\r\n  const onNodeCheckedRef = useStateRef(onNodeChecked)\r\n  const onNodeExpandedRef = useStateRef(onNodeExpanded)\r\n\r\n  const childrenRef = useStateRef(children)\r\n  const toNearestChildrenRef = useStateRef(toNearestChildren)\r\n\r\n  const getCheckedState: ITreeContext['getCheckedState'] = useCallback(\r\n    (id) => checked[id] || 0,\r\n    [checked]\r\n  )\r\n\r\n  const isExpanded: ITreeContext['isExpanded'] = useCallback(\r\n    (id) => expanded[id] === true,\r\n    [expanded]\r\n  )\r\n\r\n  const isDisabled: ITreeContext['isDisabled'] = useCallback(\r\n    (id) => disabled[id] === true,\r\n    [disabled]\r\n  )\r\n\r\n  const toggleExpanded: ITreeContext['toggleExpanded'] = useCallback(\r\n    (id) => {\r\n      const expanded = expandedRef.current\r\n      const onExpanded = onExpandedRef.current\r\n      const onNodeExpanded = onNodeExpandedRef.current\r\n\r\n      const newExpanded = { ...expanded }\r\n      setExpandedMap(newExpanded, id, newExpanded[id] !== true)\r\n      onNodeExpanded?.(id, newExpanded[id])\r\n      setExpandedState(newExpanded)\r\n      onExpanded?.(newExpanded, expanded)\r\n    },\r\n    [expandedRef, onNodeExpandedRef, onExpandedRef, setExpandedState]\r\n  )\r\n\r\n  const toggleChecked: ITreeContext['toggleChecked'] = useCallback(\r\n    (id) => {\r\n      const children = childrenRef.current\r\n      const toNearestChildren = toNearestChildrenRef.current\r\n      const checked = checkedRef.current\r\n      const disabled = disabledRef.current\r\n      const onChecked = onCheckedRef.current\r\n      const onNodeChecked = onNodeCheckedRef.current\r\n      const isDisabled = (id: NodeId) => disabled[id] === true\r\n\r\n      if (isDisabled(id)) return\r\n      const index = indexOfChild(id, children)\r\n      if (index === -1) return\r\n\r\n      const newChecked = { ...checked }\r\n\r\n      // 自身状态\r\n      const newCheckState: CheckedState = checked[id] === 2 ? 0 : 2\r\n      setCheckedMap(newChecked, id, newCheckState)\r\n      onNodeChecked?.(id, 2)\r\n\r\n      // 子项状态\r\n      const theChildren = getChildren(id, children)\r\n      filterChildren(\r\n        theChildren,\r\n        (child) => !isDisabled(child.props.nodeId),\r\n        (child) => !isDisabled(child.props.nodeId)\r\n      ).forEach((child) => {\r\n        const id = child.props.nodeId\r\n        if (isDisabled(id)) return\r\n        setCheckedMap(newChecked, id, newCheckState)\r\n        onNodeChecked?.(id, 2)\r\n      })\r\n\r\n      // 父项状态\r\n      const theParents = getParents(id, children)\r\n      for (let i = 0; i < theParents.length; i += 1) {\r\n        const parent = theParents[i]\r\n        const id = parent.props.nodeId\r\n        if (isDisabled(id)) break\r\n\r\n        const nearestChildren = toNearestChildren\r\n          .get(id)\r\n          ?.filter((child) => !isDisabled(child.props.nodeId))\r\n        const oldState = newChecked[id] || 0\r\n        const state = inferChecked(newChecked, nearestChildren || [])\r\n        if (state === undefined || oldState === state) break\r\n\r\n        setCheckedMap(newChecked, id, state)\r\n        onNodeChecked?.(id, state)\r\n      }\r\n\r\n      setCheckedState(newChecked)\r\n      onChecked?.(newChecked, checked)\r\n    },\r\n    [\r\n      childrenRef,\r\n      toNearestChildrenRef,\r\n      checkedRef,\r\n      disabledRef,\r\n      onCheckedRef,\r\n      onNodeCheckedRef,\r\n      setCheckedState,\r\n    ]\r\n  )\r\n\r\n  const isExpandable = useCallback(\r\n    (id: NodeId) => {\r\n      const index: number = indexOfChild(id, children)\r\n      if (index === -1) return false\r\n      const cur = children[index]\r\n      const _children = React.Children.toArray(cur.props.children)\r\n      if (_children.some((v) => v)) return true\r\n      const next = children[index + 1]\r\n      if (!next) return false\r\n      return cur.props.level! < next.props.level!\r\n    },\r\n    [children]\r\n  )\r\n\r\n  const context: ITreeContext = useMemo(\r\n    () => ({\r\n      getCheckedState,\r\n      isDisabled,\r\n      isExpanded,\r\n      toggleExpanded,\r\n      toggleChecked,\r\n      isExpandable,\r\n    }),\r\n    [\r\n      getCheckedState,\r\n      isDisabled,\r\n      isExpanded,\r\n      toggleExpanded,\r\n      toggleChecked,\r\n      isExpandable,\r\n    ]\r\n  )\r\n\r\n  return context\r\n}\r\nexport default useTreeContext\r\n","import React from 'react'\r\nimport { CheckboxProps } from './types'\r\n\r\nimport './styles.css'\r\n\r\nconst Component: React.FC<CheckboxProps> = (props) => {\r\n  const { children, checked = 0, disabled = false, ...other } = props\r\n\r\n  return (\r\n    <span\r\n      className=\"checkbox\"\r\n      data-checked={checked}\r\n      data-disabled={disabled}\r\n      {...other}\r\n    ></span>\r\n  )\r\n}\r\n\r\nComponent.displayName = 'Checkbox'\r\nexport default Component\r\n","import React, { useEffect } from 'react'\r\nimport {\r\n  createNearestChildrenMap,\r\n  inferChecked,\r\n  filterChildren,\r\n  setCheckedMap,\r\n  popEmpty,\r\n} from './utils'\r\nimport { Checked, Disabled, TreeProps, TreeNodeElement } from './types'\r\nimport { useStateRef } from '../../utils'\r\n\r\nexport type IValidateCheckedProps = {\r\n  checked: Checked\r\n  disabled: Disabled\r\n  onChecked: TreeProps['onChecked']\r\n  setCheckedState: React.Dispatch<React.SetStateAction<Checked>>\r\n  children: TreeNodeElement[]\r\n  toNearestChildren: ReturnType<typeof createNearestChildrenMap>\r\n}\r\n\r\n/**\r\n * 验证父子 checked 的有效性，并更正\r\n * 触发条件：\r\n * 1. children 更改\r\n * 2. active 由 false 变为 true\r\n * @param active 设为 false 将不进行验证\r\n * @param props\r\n */\r\nexport function useValidateChecked(\r\n  active: boolean,\r\n  props: IValidateCheckedProps\r\n) {\r\n  const {\r\n    checked,\r\n    disabled,\r\n    onChecked,\r\n    setCheckedState,\r\n    children,\r\n    toNearestChildren,\r\n  } = props\r\n\r\n  const checkedRef = useStateRef(checked)\r\n  const disabledRef = useStateRef(disabled)\r\n  const onCheckedRef = useStateRef(onChecked)\r\n\r\n  useEffect(() => {\r\n    if (!active) return\r\n    const newChecked = { ...checkedRef.current }\r\n    const disabled = disabledRef.current\r\n    const onChecked = onCheckedRef.current\r\n\r\n    // 自上而下 将全选的子项设为2\r\n    const queue = filterChildren(\r\n      children,\r\n      (child) => !disabled[child.props.nodeId],\r\n      (child) => !disabled[child.props.nodeId]\r\n    )\r\n    const stack: TreeNodeElement[] = []\r\n    for (let i = 0; i < queue.length; i += 1) {\r\n      const cur = queue[i]\r\n      const id = cur.props.nodeId\r\n      const level = cur.props.level!\r\n      if (stack.length > level) {\r\n        stack.splice(level)\r\n        popEmpty(stack)\r\n      }\r\n      const parent = stack[stack.length - 1]\r\n\r\n      if (parent !== undefined) {\r\n        const pid = parent.props.nodeId\r\n        if (newChecked[pid] === 2) setCheckedMap(newChecked, id, 2)\r\n      }\r\n      stack[level] = cur\r\n    }\r\n\r\n    // 自下而上 将非全选父项改为0或1\r\n    toNearestChildren.forEach((nearestChildren, pid) => {\r\n      const children = nearestChildren.filter((v) => !disabled[v.props.nodeId])\r\n      if (!(children && children.length)) return\r\n      const state = inferChecked(newChecked, children)\r\n      if (state !== undefined) setCheckedMap(newChecked, pid, state)\r\n    })\r\n\r\n    setCheckedState(newChecked)\r\n    onChecked?.(newChecked, checkedRef.current)\r\n  }, [\r\n    active,\r\n    children,\r\n    toNearestChildren,\r\n    checkedRef,\r\n    disabledRef,\r\n    onCheckedRef,\r\n    setCheckedState,\r\n  ])\r\n}\r\n\r\nexport default useValidateChecked\r\n","import React, { useMemo } from 'react'\r\nimport { Checked, Disabled, Expanded, TreeProps } from './types'\r\nimport { TreeContext, useTreeContext } from './useTreeContext'\r\nimport { useValidateChecked } from './useValidateChecked'\r\nimport {\r\n  flatChildren as flat,\r\n  filterChildren,\r\n  createNearestChildrenMap,\r\n} from './utils'\r\nimport { usePropsState } from '../../utils'\r\n\r\nimport './styles.css'\r\n\r\nconst Component: React.FC<TreeProps> = (props) => {\r\n  const {\r\n    checked: checkedProp,\r\n    disabled: disabledProp,\r\n    expanded: expandedProp,\r\n    onChecked,\r\n    onExpanded,\r\n    onNodeChecked,\r\n    onNodeExpanded,\r\n    validateChecked = true,\r\n    children,\r\n  } = props\r\n\r\n  const [checked, setCheckedState] = usePropsState<Checked>({}, checkedProp)\r\n  const [disabled] = usePropsState<Disabled>({}, disabledProp)\r\n  const [expanded, setExpandedState] = usePropsState<Expanded>({}, expandedProp)\r\n\r\n  const flatChildren = useMemo(() => flat(children), [children])\r\n  const toNearestChildren = useMemo(\r\n    () => createNearestChildrenMap(flatChildren),\r\n    [flatChildren]\r\n  )\r\n\r\n  /* 验证 checked 有效性 */\r\n  useValidateChecked(validateChecked, {\r\n    checked,\r\n    disabled,\r\n    onChecked,\r\n    setCheckedState,\r\n    children: flatChildren,\r\n    toNearestChildren,\r\n  })\r\n\r\n  const context = useTreeContext({\r\n    checked,\r\n    disabled,\r\n    expanded,\r\n    onChecked,\r\n    onExpanded,\r\n    onNodeChecked,\r\n    onNodeExpanded,\r\n\r\n    setCheckedState,\r\n    setExpandedState,\r\n\r\n    children: flatChildren,\r\n    toNearestChildren,\r\n  })\r\n\r\n  /* 筛选未被展开的子项 */\r\n  const visiabledChildren = useMemo(() => {\r\n    return filterChildren(flatChildren, (child) => {\r\n      return expanded[child.props.nodeId] || false\r\n    })\r\n  }, [expanded, flatChildren])\r\n\r\n  return (\r\n    <TreeContext.Provider value={context}>\r\n      <div>{visiabledChildren}</div>\r\n    </TreeContext.Provider>\r\n  )\r\n}\r\n\r\nComponent.displayName = 'Tree'\r\nexport default Component\r\n","export * from './Checkbox'\r\nexport { default as Checkbox } from './Checkbox'\r\nexport * from './types'\r\n","import { NodeId } from '../components/Tree'\r\n\r\nexport interface Data {\r\n  id: NodeId\r\n  pid: NodeId | null\r\n  name: React.ReactNode\r\n  children?: React.ReactNode[]\r\n  checked?: boolean\r\n  disabled?: boolean\r\n  expanded?: boolean\r\n  loadData?: boolean\r\n}\r\n\r\nlet count = 0\r\nexport function n(options: Partial<Data> = {}) {\r\n  const id = count++\r\n  const res: Data = {\r\n    ...options,\r\n    id: `${options.id ? options.id : id}`,\r\n    pid: options.pid ? options.pid : null,\r\n    name: `${options.name || '节点'} ${id}`,\r\n  }\r\n  return res\r\n}\r\n\r\nexport const db = [\r\n  n({ name: '异步', loadData: true }),\r\n  n({ name: '禁用', disabled: true }),\r\n  n({ name: '父节点 默认勾选', checked: true }),\r\n  n({ name: '子节点 默认勾选' }),\r\n  n({ name: '多级' }),\r\n]\r\nlet pid = db[1].id\r\ndb.push(n({ pid, disabled: true }), n({ pid }))\r\n\r\npid = db[2].id\r\ndb.push(n({ pid }), n({ pid }))\r\n\r\npid = db[3].id\r\ndb.push(n({ pid, checked: true }), n({ pid }))\r\n;(() => {\r\n  let queue: Data[] = [db[4]]\r\n  for (let i = 0; i < 4; i += 1) {\r\n    const newQueue: Data[] = []\r\n    while (queue.length) {\r\n      const cur = queue.shift()!\r\n      const pid = cur.id\r\n      const children = [n({ pid }), n({ pid, disabled: true })]\r\n      newQueue.push(...children)\r\n      db.push(...children)\r\n    }\r\n    queue = newQueue\r\n  }\r\n})()\r\n\r\nexport default db\r\n","import { db, n } from './db'\r\nimport { NodeId } from '../components/Tree'\r\n\r\nexport function createPromise<T>(data: T) {\r\n  return new Promise<T>((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(data)\r\n    }, 500)\r\n  })\r\n}\r\n\r\nconst api = {\r\n  data() {\r\n    return createPromise(db)\r\n  },\r\n  more(pid: NodeId, limit: number = 10) {\r\n    return createPromise(new Array(limit).fill(true).map(() => n({ pid })))\r\n  },\r\n}\r\n\r\nexport default api\r\n","import React, { useState, useMemo, useCallback } from 'react'\r\nimport { Tree, TreeNode } from './components/Tree'\r\nimport api from './mock/api'\r\nimport { Data } from './mock/db'\r\nimport {\r\n  NodeId,\r\n  TreeProps,\r\n  Checked,\r\n  Disabled,\r\n  Expanded,\r\n} from './components/Tree'\r\nimport { useStateRef, useFirstRun } from './utils'\r\n\r\ntype ILoaded = {\r\n  [key in NodeId]: 0 | 1 | 2\r\n}\r\n\r\ntype IData = Data & {\r\n  nodeChildren: IData[]\r\n}\r\n\r\nfunction Stage0() {\r\n  const [data, setData] = useState<IData[]>([])\r\n\r\n  const [checked, setChecked] = useState<Checked>({})\r\n  const [disabled, setDisabled] = useState<Disabled>({})\r\n  const [expanded, setExpanded] = useState<Expanded>({})\r\n  const [loaded, setLoaded] = useState<\r\n    {\r\n      [key in NodeId]: 0 | 1 | 2\r\n    }\r\n  >({})\r\n\r\n  const loadedRef = useStateRef(loaded)\r\n\r\n  const init = useCallback(\r\n    (res: Data[]) => {\r\n      const newChecked: Checked = {}\r\n      const newDisabled: Disabled = {}\r\n      const newExpanded: Expanded = {}\r\n      const newLoaded: ILoaded = {}\r\n      res.forEach((node) => {\r\n        const { id, checked, disabled, expanded, loadData } = node\r\n        if (checked) newChecked[id] = 2\r\n        if (disabled) newDisabled[id] = true\r\n        if (expanded) newExpanded[id] = true\r\n        if (loadData) newLoaded[id] = 0\r\n      })\r\n      setChecked((state) => ({ ...state, ...newChecked }))\r\n      setDisabled((state) => ({ ...state, ...newDisabled }))\r\n      setExpanded((state) => ({ ...state, ...newExpanded }))\r\n      setLoaded((state) => ({ ...state, ...newLoaded }))\r\n    },\r\n    [setChecked, setDisabled, setExpanded, setLoaded]\r\n  )\r\n\r\n  /* 请求初始数据 */\r\n  useFirstRun(() => {\r\n    api.data().then((res) => {\r\n      init(res)\r\n      setData((state) => insert(state, res))\r\n    })\r\n  }, [init, setData])\r\n\r\n  /* 异步数据请求 */\r\n  const onNodeExpanded: TreeProps['onNodeExpanded'] = useCallback(\r\n    async (id, value) => {\r\n      if (!value) return\r\n      const loaded = loadedRef.current[id]\r\n      if (loaded === undefined || loaded > 0) return\r\n\r\n      setLoaded((state) => ({ ...state, [id]: 1 }))\r\n      const res = await api.more(id, 10)\r\n      setLoaded((state) => ({ ...state, [id]: 2 }))\r\n      init(res)\r\n      setData((state) => insert(state, res))\r\n    },\r\n    [setData, loadedRef, setLoaded, init]\r\n  )\r\n\r\n  const children = useMemo(() => {\r\n    const render = (node: IData) => (\r\n      <TreeNode key={node.id} nodeId={node.id} name={node.name}>\r\n        {node.children}\r\n        {node.nodeChildren.map((v) => render(v))}\r\n        {node.loadData && loaded[node.id] !== 2 && <div>加载中...</div>}\r\n      </TreeNode>\r\n    )\r\n    return data.map((v) => render(v))\r\n  }, [data, loaded])\r\n\r\n  return (\r\n    <div>\r\n      {!children.length && <div>加载中...</div>}\r\n      <Tree\r\n        checked={checked}\r\n        disabled={disabled}\r\n        expanded={expanded}\r\n        onChecked={setChecked}\r\n        onExpanded={setExpanded}\r\n        onNodeExpanded={onNodeExpanded}\r\n      >\r\n        {children}\r\n      </Tree>\r\n      <button onClick={() => printChecked(checked, data)}>打印选中</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stage0\r\n\r\n/**\r\n * 将拉取到的数据 按父级插入到数组中\r\n * @param data\r\n */\r\nfunction insert(arr: IData[], data: Data[]): IData[] {\r\n  const res: IData[] = JSON.parse(JSON.stringify(arr))\r\n  data.forEach((v) => {\r\n    const child: IData = { ...v, nodeChildren: [] }\r\n    if (child.pid) {\r\n      const parent = findNode(child.pid, res)\r\n      if (parent) {\r\n        parent.nodeChildren.push(child)\r\n      } else {\r\n        res.push(child)\r\n      }\r\n    } else {\r\n      res.push(child)\r\n    }\r\n  })\r\n  return res\r\n}\r\n\r\nfunction findNode(id: NodeId, data: IData[]): IData | void {\r\n  for (let i = 0; i < data.length; i += 1) {\r\n    const res = findNodeHelper(id, data[i])\r\n    if (res) return res\r\n  }\r\n}\r\n\r\nfunction findNodeHelper(id: NodeId, tree: IData): IData | void {\r\n  if (tree.id === id) return tree\r\n  const children = tree.nodeChildren\r\n  if (children) {\r\n    for (let i = 0; i < children.length; i += 1) {\r\n      const res = findNodeHelper(id, children[i])\r\n      if (res) return res\r\n    }\r\n  }\r\n}\r\n\r\nfunction printChecked(checked: Checked, data: IData[]) {\r\n  const res: IData[] = []\r\n  for (const id in checked) {\r\n    // 只输出全选状态的节点\r\n    if (checked[id] !== 2) continue\r\n    const node = findNode(id, data)\r\n    if (node) res.push(node)\r\n  }\r\n  console.log(res)\r\n}\r\n","import React, { useState, useMemo, useCallback } from 'react'\r\nimport { Tree, TreeNode } from './components/Tree'\r\nimport api from './mock/api'\r\nimport { Data } from './mock/db'\r\nimport {\r\n  NodeId,\r\n  TreeProps,\r\n  Checked,\r\n  Disabled,\r\n  Expanded,\r\n} from './components/Tree'\r\nimport { useStateRef, useFirstRun } from './utils'\r\n\r\ntype ILoaded = {\r\n  [key in NodeId]: 0 | 1 | 2\r\n}\r\n\r\ntype IData = Data & {\r\n  level: number\r\n}\r\n\r\nfunction Stage1() {\r\n  const [data, setData] = useState<IData[]>([])\r\n\r\n  const [checked, setChecked] = useState<Checked>({})\r\n  const [disabled, setDisabled] = useState<Disabled>({})\r\n  const [expanded, setExpanded] = useState<Expanded>({})\r\n  const [loaded, setLoaded] = useState<ILoaded>({})\r\n\r\n  const loadedRef = useStateRef(loaded)\r\n\r\n  const init = useCallback(\r\n    (res: Data[]) => {\r\n      const newChecked: Checked = {}\r\n      const newDisabled: Disabled = {}\r\n      const newExpanded: Expanded = {}\r\n      const newLoaded: ILoaded = {}\r\n      res.forEach((node) => {\r\n        const { id, checked, disabled, expanded, loadData } = node\r\n        if (checked) newChecked[id] = 2\r\n        if (disabled) newDisabled[id] = true\r\n        if (expanded) newExpanded[id] = true\r\n        if (loadData) newLoaded[id] = 0\r\n      })\r\n      setChecked((state) => ({ ...state, ...newChecked }))\r\n      setDisabled((state) => ({ ...state, ...newDisabled }))\r\n      setExpanded((state) => ({ ...state, ...newExpanded }))\r\n      setLoaded((state) => ({ ...state, ...newLoaded }))\r\n    },\r\n    [setChecked, setDisabled, setExpanded, setLoaded]\r\n  )\r\n\r\n  /* 请求初始数据 */\r\n  useFirstRun(() => {\r\n    api.data().then((res) => {\r\n      init(res)\r\n      setData((state) => insert(state, res))\r\n    })\r\n  }, [init, setData])\r\n\r\n  /* 异步数据请求 */\r\n  const onNodeExpanded: TreeProps['onNodeExpanded'] = useCallback(\r\n    async (id, value) => {\r\n      if (!value) return\r\n      const loaded = loadedRef.current[id]\r\n      if (loaded === undefined || loaded > 0) return\r\n\r\n      setLoaded((state) => ({ ...state, [id]: 1 }))\r\n      const res = await api.more(id, 10)\r\n      setLoaded((state) => ({ ...state, [id]: 2 }))\r\n\r\n      init(res)\r\n      setData((state) => insert(state, res))\r\n    },\r\n    [setData, loadedRef, setLoaded, init]\r\n  )\r\n\r\n  const children = useMemo(() => {\r\n    return data.map((node) => (\r\n      <TreeNode\r\n        key={node.id}\r\n        nodeId={node.id}\r\n        name={node.name}\r\n        level={node.level}\r\n      >\r\n        {node.children}\r\n        {node.loadData && loaded[node.id] !== 2 && <div>加载中...</div>}\r\n      </TreeNode>\r\n    ))\r\n  }, [data, loaded])\r\n\r\n  return (\r\n    <div>\r\n      {!children.length && <div>加载中...</div>}\r\n      <Tree\r\n        checked={checked}\r\n        disabled={disabled}\r\n        expanded={expanded}\r\n        onChecked={setChecked}\r\n        onExpanded={setExpanded}\r\n        onNodeExpanded={onNodeExpanded}\r\n      >\r\n        {children}\r\n      </Tree>\r\n      <button onClick={() => printChecked(checked, data)}>打印选中</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Stage1\r\n\r\n/**\r\n * 将拉取到的数据 按父级插入到数组中\r\n * @param data\r\n */\r\nfunction insert(arr: IData[], data: Data[]): IData[] {\r\n  const res: IData[] = arr.slice()\r\n  data.forEach((v) => {\r\n    const child: IData = { ...v, level: 0 }\r\n    if (child.pid) {\r\n      let index = lastIndexOf(res, child.pid)\r\n      const level = index === -1 ? 0 : res[index].level\r\n      index = index === -1 ? res.length : index + 1\r\n\r\n      for (; index < res.length; index += 1) {\r\n        if ((res[index].level || 0) <= level) break\r\n      }\r\n\r\n      child.level = level + 1\r\n      res.splice(index, 0, child)\r\n    } else {\r\n      res.push(child)\r\n    }\r\n  })\r\n  return res\r\n}\r\n\r\nfunction lastIndexOf(arr: IData[], id: NodeId) {\r\n  let index = -1\r\n  for (let i = arr.length - 1; i >= 0; i -= 1) {\r\n    if (id === arr[i].id) {\r\n      index = i\r\n      break\r\n    }\r\n  }\r\n  return index\r\n}\r\n\r\nfunction printChecked(checked: Checked, data: IData[]) {\r\n  const res: Data[] = []\r\n  for (const id in checked) {\r\n    // 只输出全选状态的节点\r\n    if (checked[id] !== 2) continue\r\n    const index = lastIndexOf(data, id)\r\n    if (index !== -1) res.push(data[index])\r\n  }\r\n  console.log(res)\r\n}\r\n","import React, { useState, useMemo } from 'react'\nimport Stage0 from './Stage0'\nimport Stage1 from './Stage1'\n\nfunction App() {\n  const buttons = ['嵌套对象生成的树状图', '一维数组生成的树状图']\n  const [stage, setStage] = useState(0)\n  const [title, setTitle] = useState(buttons[0])\n  const showStage = useMemo(() => {\n    switch (stage) {\n      case 1:\n        return <Stage1 />\n      default:\n        return <Stage0 />\n    }\n  }, [stage])\n\n  return (\n    <div>\n      {buttons.map((title, index) => (\n        <button\n          key={title}\n          onClick={() => {\n            setStage(index)\n            setTitle(title)\n          }}\n        >\n          {title}\n        </button>\n      ))}\n      <div>{title}</div>\n      {showStage}\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}